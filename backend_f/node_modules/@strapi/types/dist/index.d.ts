import type { Database } from '@strapi/database';
import type { Logger } from '@strapi/logger';
import type { Server } from './modules/server';
import type { EventHub } from './modules/event-hub';
import type { CronService } from './modules/cron';
import type { WebhookRunner } from './modules/webhook-runner';
import type { WebhookStore } from './modules/webhook-store';
import type { CoreStore } from './modules/core-store';
import type { EntityValidator } from './modules/entity-validator';
import type * as EntityService from './modules/entity-service';
import type { TelemetryService } from './modules/metrics';
import type { RequestContext } from './modules/request-context';
import type { Common, Shared, Schema, StrapiDirectories } from './types';
import type * as CustomFields from './modules/custom-fields';
import type { Fetch } from './modules/fetch';
import type { AuthenticationService } from './modules/auth';
import type { ContentApi } from './modules/content-api';
import type { SanitizersRegistry } from './modules/sanitizers';
import type { ValidatorsRegistry } from './modules/validators';
import type { Container } from './container';
export type * from './types';
export { Container, Server, EventHub, CronService, WebhookRunner, WebhookStore, CoreStore, EntityValidator, EntityService, TelemetryService, RequestContext, CustomFields, Fetch, AuthenticationService, ContentApi, SanitizersRegistry, ValidatorsRegistry, };
declare global {
    var strapi: LoadedStrapi;
    namespace NodeJS {
        interface Global {
            strapi: LoadedStrapi;
        }
    }
}
export interface Reloader {
    isReloading: boolean;
    isWatching: boolean;
    (): void;
}
export interface StartupLogger {
    logStats(): void;
    logFirstStartupMessage(): void;
    logDefaultStartupMessage(): void;
    logStartupMessage({ isInitialized }: {
        isInitialized: boolean;
    }): void;
}
export interface StrapiFS {
    writeAppFile(optPath: string | string[], data: string): Promise<void>;
    writePluginFile(plugin: string, opt